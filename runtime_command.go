// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RuntimeCommand Runtime command
//
// A command run on the Runtime API
// swagger:model runtime_command
type RuntimeCommand struct {

	// all
	All bool `json:"all,omitempty"`

	// backend
	Backend string `json:"backend,omitempty"`

	// command
	// Required: true
	// Enum: [shutdown-sessions-server clear-counters]
	Command *string `json:"command"`

	// result
	// Read Only: true
	// Enum: [successful failed]
	Result string `json:"result,omitempty"`

	// server
	Server string `json:"server,omitempty"`
}

// Validate validates this runtime command
func (m *RuntimeCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var runtimeCommandTypeCommandPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["shutdown-sessions-server","clear-counters"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runtimeCommandTypeCommandPropEnum = append(runtimeCommandTypeCommandPropEnum, v)
	}
}

const (

	// RuntimeCommandCommandShutdownSessionsServer captures enum value "shutdown-sessions-server"
	RuntimeCommandCommandShutdownSessionsServer string = "shutdown-sessions-server"

	// RuntimeCommandCommandClearCounters captures enum value "clear-counters"
	RuntimeCommandCommandClearCounters string = "clear-counters"
)

// prop value enum
func (m *RuntimeCommand) validateCommandEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, runtimeCommandTypeCommandPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RuntimeCommand) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	// value enum
	if err := m.validateCommandEnum("command", "body", *m.Command); err != nil {
		return err
	}

	return nil
}

var runtimeCommandTypeResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["successful","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runtimeCommandTypeResultPropEnum = append(runtimeCommandTypeResultPropEnum, v)
	}
}

const (

	// RuntimeCommandResultSuccessful captures enum value "successful"
	RuntimeCommandResultSuccessful string = "successful"

	// RuntimeCommandResultFailed captures enum value "failed"
	RuntimeCommandResultFailed string = "failed"
)

// prop value enum
func (m *RuntimeCommand) validateResultEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, runtimeCommandTypeResultPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RuntimeCommand) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(m.Result) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultEnum("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuntimeCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuntimeCommand) UnmarshalBinary(b []byte) error {
	var res RuntimeCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
