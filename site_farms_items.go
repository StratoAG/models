// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteFarmsItems site farms items
// swagger:model siteFarmsItems
type SiteFarmsItems struct {

	// balance
	Balance *SiteFarmsItemsBalance `json:"balance,omitempty"`

	// cond
	// Enum: [if unless]
	Cond string `json:"cond,omitempty"`

	// cond test
	CondTest string `json:"cond_test,omitempty"`

	// forwardfor
	Forwardfor bool `json:"forwardfor,omitempty"`

	// mode
	// Enum: [http tcp]
	Mode string `json:"mode,omitempty"`

	// name
	// Required: true
	// Pattern: ^[A-Za-z0-9-_.:]+$
	Name string `json:"name"`

	// servers
	Servers []*SiteFarmsItemsServersItems `json:"servers"`

	// use as
	// Required: true
	// Enum: [default conditional]
	UseAs string `json:"use_as"`
}

// Validate validates this site farms items
func (m *SiteFarmsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCond(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseAs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteFarmsItems) validateBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

var siteFarmsItemsTypeCondPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFarmsItemsTypeCondPropEnum = append(siteFarmsItemsTypeCondPropEnum, v)
	}
}

const (

	// SiteFarmsItemsCondIf captures enum value "if"
	SiteFarmsItemsCondIf string = "if"

	// SiteFarmsItemsCondUnless captures enum value "unless"
	SiteFarmsItemsCondUnless string = "unless"
)

// prop value enum
func (m *SiteFarmsItems) validateCondEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFarmsItemsTypeCondPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFarmsItems) validateCond(formats strfmt.Registry) error {

	if swag.IsZero(m.Cond) { // not required
		return nil
	}

	// value enum
	if err := m.validateCondEnum("cond", "body", m.Cond); err != nil {
		return err
	}

	return nil
}

var siteFarmsItemsTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFarmsItemsTypeModePropEnum = append(siteFarmsItemsTypeModePropEnum, v)
	}
}

const (

	// SiteFarmsItemsModeHTTP captures enum value "http"
	SiteFarmsItemsModeHTTP string = "http"

	// SiteFarmsItemsModeTCP captures enum value "tcp"
	SiteFarmsItemsModeTCP string = "tcp"
)

// prop value enum
func (m *SiteFarmsItems) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFarmsItemsTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFarmsItems) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *SiteFarmsItems) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z0-9-_.:]+$`); err != nil {
		return err
	}

	return nil
}

func (m *SiteFarmsItems) validateServers(formats strfmt.Registry) error {

	if swag.IsZero(m.Servers) { // not required
		return nil
	}

	for i := 0; i < len(m.Servers); i++ {
		if swag.IsZero(m.Servers[i]) { // not required
			continue
		}

		if m.Servers[i] != nil {
			if err := m.Servers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var siteFarmsItemsTypeUseAsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","conditional"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFarmsItemsTypeUseAsPropEnum = append(siteFarmsItemsTypeUseAsPropEnum, v)
	}
}

const (

	// SiteFarmsItemsUseAsDefault captures enum value "default"
	SiteFarmsItemsUseAsDefault string = "default"

	// SiteFarmsItemsUseAsConditional captures enum value "conditional"
	SiteFarmsItemsUseAsConditional string = "conditional"
)

// prop value enum
func (m *SiteFarmsItems) validateUseAsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFarmsItemsTypeUseAsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFarmsItems) validateUseAs(formats strfmt.Registry) error {

	if err := validate.RequiredString("use_as", "body", string(m.UseAs)); err != nil {
		return err
	}

	// value enum
	if err := m.validateUseAsEnum("use_as", "body", m.UseAs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteFarmsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteFarmsItems) UnmarshalBinary(b []byte) error {
	var res SiteFarmsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
