// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this files except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Site Site
//
// Site configuration. Sites are considered as one service and all farms connected to that service.
// Farms are connected to service using use-backend and default_backend directives. Sites let you
// configure simple HAProxy configurations, for more advanced options use /haproxy/configuration
// endpoints.
//
// swagger:model site
type Site struct {

	// site farms
	SiteFarms []*SiteFarm `json:"farms"`

	// name
	// Required: true
	// Pattern: ^[A-Za-z0-9-_.:]+$
	Name string `json:"name"`

	// service
	Service *SiteService `json:"service,omitempty"`
}

// Validate validates this site
func (m *Site) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSiteFarms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Site) validateSiteFarms(formats strfmt.Registry) error {

	if swag.IsZero(m.SiteFarms) { // not required
		return nil
	}

	for i := 0; i < len(m.SiteFarms); i++ {
		if swag.IsZero(m.SiteFarms[i]) { // not required
			continue
		}

		if m.SiteFarms[i] != nil {
			if err := m.SiteFarms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("farms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Site) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z0-9-_.:]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Site) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Site) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Site) UnmarshalBinary(b []byte) error {
	var res Site
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteFarm site farm
// swagger:model SiteFarm
type SiteFarm struct {

	// site servers
	SiteServers []*SiteServer `json:"servers"`

	// balance
	Balance *SiteFarmBalance `json:"balance,omitempty"`

	// cond
	// Enum: [if unless]
	Cond string `json:"cond,omitempty"`

	// cond test
	CondTest string `json:"cond_test,omitempty"`

	// forwardfor
	Forwardfor *SiteFarmForwardFor `json:"forwardfor,omitempty"`

	// mode
	// Enum: [http tcp]
	Mode string `json:"mode,omitempty"`

	// name
	// Required: true
	// Pattern: ^[A-Za-z0-9-_.:]+$
	Name string `json:"name"`

	// use as
	// Required: true
	// Enum: [default conditional]
	UseAs string `json:"use_as"`
}

// Validate validates this site farm
func (m *SiteFarm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSiteServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCond(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForwardfor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseAs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteFarm) validateSiteServers(formats strfmt.Registry) error {

	if swag.IsZero(m.SiteServers) { // not required
		return nil
	}

	for i := 0; i < len(m.SiteServers); i++ {
		if swag.IsZero(m.SiteServers[i]) { // not required
			continue
		}

		if m.SiteServers[i] != nil {
			if err := m.SiteServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SiteFarm) validateBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

var siteFarmTypeCondPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFarmTypeCondPropEnum = append(siteFarmTypeCondPropEnum, v)
	}
}

const (

	// SiteFarmCondIf captures enum value "if"
	SiteFarmCondIf string = "if"

	// SiteFarmCondUnless captures enum value "unless"
	SiteFarmCondUnless string = "unless"
)

// prop value enum
func (m *SiteFarm) validateCondEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFarmTypeCondPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFarm) validateCond(formats strfmt.Registry) error {

	if swag.IsZero(m.Cond) { // not required
		return nil
	}

	// value enum
	if err := m.validateCondEnum("cond", "body", m.Cond); err != nil {
		return err
	}

	return nil
}

func (m *SiteFarm) validateForwardfor(formats strfmt.Registry) error {

	if swag.IsZero(m.Forwardfor) { // not required
		return nil
	}

	if m.Forwardfor != nil {
		if err := m.Forwardfor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forwardfor")
			}
			return err
		}
	}

	return nil
}

var siteFarmTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFarmTypeModePropEnum = append(siteFarmTypeModePropEnum, v)
	}
}

const (

	// SiteFarmModeHTTP captures enum value "http"
	SiteFarmModeHTTP string = "http"

	// SiteFarmModeTCP captures enum value "tcp"
	SiteFarmModeTCP string = "tcp"
)

// prop value enum
func (m *SiteFarm) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFarmTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFarm) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *SiteFarm) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z0-9-_.:]+$`); err != nil {
		return err
	}

	return nil
}

var siteFarmTypeUseAsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","conditional"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFarmTypeUseAsPropEnum = append(siteFarmTypeUseAsPropEnum, v)
	}
}

const (

	// SiteFarmUseAsDefault captures enum value "default"
	SiteFarmUseAsDefault string = "default"

	// SiteFarmUseAsConditional captures enum value "conditional"
	SiteFarmUseAsConditional string = "conditional"
)

// prop value enum
func (m *SiteFarm) validateUseAsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFarmTypeUseAsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFarm) validateUseAs(formats strfmt.Registry) error {

	if err := validate.RequiredString("use_as", "body", string(m.UseAs)); err != nil {
		return err
	}

	// value enum
	if err := m.validateUseAsEnum("use_as", "body", m.UseAs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteFarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteFarm) UnmarshalBinary(b []byte) error {
	var res SiteFarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteFarmBalance site farm balance
// swagger:model SiteFarmBalance
type SiteFarmBalance struct {

	// algorithm
	// Enum: [roundrobin static-rr leastconn first source uri url_param random]
	Algorithm string `json:"algorithm,omitempty"`

	// arguments
	Arguments []string `json:"arguments"`
}

// Validate validates this site farm balance
func (m *SiteFarmBalance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArguments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var siteFarmBalanceTypeAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["roundrobin","static-rr","leastconn","first","source","uri","url_param","random"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFarmBalanceTypeAlgorithmPropEnum = append(siteFarmBalanceTypeAlgorithmPropEnum, v)
	}
}

const (

	// SiteFarmBalanceAlgorithmRoundrobin captures enum value "roundrobin"
	SiteFarmBalanceAlgorithmRoundrobin string = "roundrobin"

	// SiteFarmBalanceAlgorithmStaticRr captures enum value "static-rr"
	SiteFarmBalanceAlgorithmStaticRr string = "static-rr"

	// SiteFarmBalanceAlgorithmLeastconn captures enum value "leastconn"
	SiteFarmBalanceAlgorithmLeastconn string = "leastconn"

	// SiteFarmBalanceAlgorithmFirst captures enum value "first"
	SiteFarmBalanceAlgorithmFirst string = "first"

	// SiteFarmBalanceAlgorithmSource captures enum value "source"
	SiteFarmBalanceAlgorithmSource string = "source"

	// SiteFarmBalanceAlgorithmURI captures enum value "uri"
	SiteFarmBalanceAlgorithmURI string = "uri"

	// SiteFarmBalanceAlgorithmURLParam captures enum value "url_param"
	SiteFarmBalanceAlgorithmURLParam string = "url_param"

	// SiteFarmBalanceAlgorithmRandom captures enum value "random"
	SiteFarmBalanceAlgorithmRandom string = "random"
)

// prop value enum
func (m *SiteFarmBalance) validateAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFarmBalanceTypeAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFarmBalance) validateAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.Algorithm) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlgorithmEnum("balance"+"."+"algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	return nil
}

func (m *SiteFarmBalance) validateArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.Arguments) { // not required
		return nil
	}

	for i := 0; i < len(m.Arguments); i++ {

		if err := validate.Pattern("balance"+"."+"arguments"+"."+strconv.Itoa(i), "body", string(m.Arguments[i]), `^[^\s]+$`); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteFarmBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteFarmBalance) UnmarshalBinary(b []byte) error {
	var res SiteFarmBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteFarmForwardFor site farm forward for
// swagger:model SiteFarmForwardFor
type SiteFarmForwardFor struct {

	// enabled
	// Required: true
	// Enum: [enabled disabled]
	Enabled *string `json:"enabled"`

	// except
	// Pattern: ^[^\s]+$
	Except string `json:"except,omitempty"`

	// header
	// Pattern: ^[^\s]+$
	Header string `json:"header,omitempty"`

	// ifnone
	Ifnone bool `json:"ifnone,omitempty"`
}

// Validate validates this site farm forward for
func (m *SiteFarmForwardFor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var siteFarmForwardForTypeEnabledPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFarmForwardForTypeEnabledPropEnum = append(siteFarmForwardForTypeEnabledPropEnum, v)
	}
}

const (

	// SiteFarmForwardForEnabledEnabled captures enum value "enabled"
	SiteFarmForwardForEnabledEnabled string = "enabled"

	// SiteFarmForwardForEnabledDisabled captures enum value "disabled"
	SiteFarmForwardForEnabledDisabled string = "disabled"
)

// prop value enum
func (m *SiteFarmForwardFor) validateEnabledEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFarmForwardForTypeEnabledPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFarmForwardFor) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("forwardfor"+"."+"enabled", "body", m.Enabled); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnabledEnum("forwardfor"+"."+"enabled", "body", *m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *SiteFarmForwardFor) validateExcept(formats strfmt.Registry) error {

	if swag.IsZero(m.Except) { // not required
		return nil
	}

	if err := validate.Pattern("forwardfor"+"."+"except", "body", string(m.Except), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *SiteFarmForwardFor) validateHeader(formats strfmt.Registry) error {

	if swag.IsZero(m.Header) { // not required
		return nil
	}

	if err := validate.Pattern("forwardfor"+"."+"header", "body", string(m.Header), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteFarmForwardFor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteFarmForwardFor) UnmarshalBinary(b []byte) error {
	var res SiteFarmForwardFor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteServer site server
// swagger:model SiteServer
type SiteServer struct {

	// address
	// Required: true
	// Pattern: ^[^\s]+$
	Address string `json:"address"`

	// name
	// Required: true
	// Pattern: ^[^\s]+$
	Name string `json:"name"`

	// port
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	Port *int64 `json:"port"`

	// ssl
	// Enum: [enabled disabled]
	Ssl string `json:"ssl,omitempty"`

	// ssl certificate
	// Pattern: ^[^\s]+$
	SslCertificate string `json:"ssl_certificate,omitempty"`

	// weight
	Weight *int64 `json:"weight,omitempty"`
}

// Validate validates this site server
func (m *SiteServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteServer) validateAddress(formats strfmt.Registry) error {

	if err := validate.RequiredString("address", "body", string(m.Address)); err != nil {
		return err
	}

	if err := validate.Pattern("address", "body", string(m.Address), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *SiteServer) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *SiteServer) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", int64(*m.Port), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(*m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

var siteServerTypeSslPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteServerTypeSslPropEnum = append(siteServerTypeSslPropEnum, v)
	}
}

const (

	// SiteServerSslEnabled captures enum value "enabled"
	SiteServerSslEnabled string = "enabled"

	// SiteServerSslDisabled captures enum value "disabled"
	SiteServerSslDisabled string = "disabled"
)

// prop value enum
func (m *SiteServer) validateSslEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteServerTypeSslPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteServer) validateSsl(formats strfmt.Registry) error {

	if swag.IsZero(m.Ssl) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslEnum("ssl", "body", m.Ssl); err != nil {
		return err
	}

	return nil
}

func (m *SiteServer) validateSslCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.SslCertificate) { // not required
		return nil
	}

	if err := validate.Pattern("ssl_certificate", "body", string(m.SslCertificate), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteServer) UnmarshalBinary(b []byte) error {
	var res SiteServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteService site service
// swagger:model SiteService
type SiteService struct {

	// site listeners
	SiteListeners []*SiteListener `json:"listeners"`

	// http connection mode
	// Enum: [http-tunnel httpclose forced-close http-server-close http-keep-alive]
	HTTPConnectionMode string `json:"http_connection_mode,omitempty"`

	// maxconn
	Maxconn *int64 `json:"maxconn,omitempty"`

	// mode
	// Enum: [http tcp]
	Mode string `json:"mode,omitempty"`
}

// Validate validates this site service
func (m *SiteService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSiteListeners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPConnectionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteService) validateSiteListeners(formats strfmt.Registry) error {

	if swag.IsZero(m.SiteListeners) { // not required
		return nil
	}

	for i := 0; i < len(m.SiteListeners); i++ {
		if swag.IsZero(m.SiteListeners[i]) { // not required
			continue
		}

		if m.SiteListeners[i] != nil {
			if err := m.SiteListeners[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("service" + "." + "listeners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var siteServiceTypeHTTPConnectionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http-tunnel","httpclose","forced-close","http-server-close","http-keep-alive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteServiceTypeHTTPConnectionModePropEnum = append(siteServiceTypeHTTPConnectionModePropEnum, v)
	}
}

const (

	// SiteServiceHTTPConnectionModeHTTPTunnel captures enum value "http-tunnel"
	SiteServiceHTTPConnectionModeHTTPTunnel string = "http-tunnel"

	// SiteServiceHTTPConnectionModeHttpclose captures enum value "httpclose"
	SiteServiceHTTPConnectionModeHttpclose string = "httpclose"

	// SiteServiceHTTPConnectionModeForcedClose captures enum value "forced-close"
	SiteServiceHTTPConnectionModeForcedClose string = "forced-close"

	// SiteServiceHTTPConnectionModeHTTPServerClose captures enum value "http-server-close"
	SiteServiceHTTPConnectionModeHTTPServerClose string = "http-server-close"

	// SiteServiceHTTPConnectionModeHTTPKeepAlive captures enum value "http-keep-alive"
	SiteServiceHTTPConnectionModeHTTPKeepAlive string = "http-keep-alive"
)

// prop value enum
func (m *SiteService) validateHTTPConnectionModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteServiceTypeHTTPConnectionModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteService) validateHTTPConnectionMode(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPConnectionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPConnectionModeEnum("service"+"."+"http_connection_mode", "body", m.HTTPConnectionMode); err != nil {
		return err
	}

	return nil
}

var siteServiceTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteServiceTypeModePropEnum = append(siteServiceTypeModePropEnum, v)
	}
}

const (

	// SiteServiceModeHTTP captures enum value "http"
	SiteServiceModeHTTP string = "http"

	// SiteServiceModeTCP captures enum value "tcp"
	SiteServiceModeTCP string = "tcp"
)

// prop value enum
func (m *SiteService) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteServiceTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteService) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("service"+"."+"mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteService) UnmarshalBinary(b []byte) error {
	var res SiteService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteListener site listener
// swagger:model SiteListener
type SiteListener struct {

	// address
	// Required: true
	// Pattern: ^[^\s]+$
	Address string `json:"address"`

	// name
	// Required: true
	// Pattern: ^[^\s]+$
	Name string `json:"name"`

	// port
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	Port *int64 `json:"port"`

	// ssl
	Ssl bool `json:"ssl,omitempty"`

	// ssl certificate
	// Pattern: ^[^\s]+$
	SslCertificate string `json:"ssl_certificate,omitempty"`
}

// Validate validates this site listener
func (m *SiteListener) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteListener) validateAddress(formats strfmt.Registry) error {

	if err := validate.RequiredString("address", "body", string(m.Address)); err != nil {
		return err
	}

	if err := validate.Pattern("address", "body", string(m.Address), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *SiteListener) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *SiteListener) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", int64(*m.Port), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(*m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *SiteListener) validateSslCertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.SslCertificate) { // not required
		return nil
	}

	if err := validate.Pattern("ssl_certificate", "body", string(m.SslCertificate), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteListener) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteListener) UnmarshalBinary(b []byte) error {
	var res SiteListener
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
