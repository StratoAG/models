// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Filter Filter
//
// HAProxy filters
// swagger:model filter
type Filter struct {

	// id
	// Required: true
	ID int64 `json:"id"`

	// spoe config
	// Pattern: ^[^\s]+$
	SpoeConfig string `json:"spoe_config,omitempty"`

	// spoe engine
	// Pattern: ^[^\s]+$
	SpoeEngine string `json:"spoe_engine,omitempty"`

	// trace hexdump
	// Enum: [enabled]
	TraceHexdump string `json:"trace_hexdump,omitempty"`

	// trace name
	// Pattern: ^[^\s]+$
	TraceName string `json:"trace_name,omitempty"`

	// trace rnd forwarding
	// Enum: [enabled]
	TraceRndForwarding string `json:"trace_rnd_forwarding,omitempty"`

	// trace rnd parsing
	// Enum: [enabled]
	TraceRndParsing string `json:"trace_rnd_parsing,omitempty"`

	// type
	// Required: true
	// Enum: [trace compression spoe]
	Type string `json:"type"`
}

// Validate validates this filter
func (m *Filter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpoeConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpoeEngine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraceHexdump(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraceRndForwarding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraceRndParsing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Filter) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Filter) validateSpoeConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.SpoeConfig) { // not required
		return nil
	}

	if err := validate.Pattern("spoe_config", "body", string(m.SpoeConfig), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Filter) validateSpoeEngine(formats strfmt.Registry) error {

	if swag.IsZero(m.SpoeEngine) { // not required
		return nil
	}

	if err := validate.Pattern("spoe_engine", "body", string(m.SpoeEngine), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var filterTypeTraceHexdumpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterTypeTraceHexdumpPropEnum = append(filterTypeTraceHexdumpPropEnum, v)
	}
}

const (

	// FilterTraceHexdumpEnabled captures enum value "enabled"
	FilterTraceHexdumpEnabled string = "enabled"
)

// prop value enum
func (m *Filter) validateTraceHexdumpEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, filterTypeTraceHexdumpPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Filter) validateTraceHexdump(formats strfmt.Registry) error {

	if swag.IsZero(m.TraceHexdump) { // not required
		return nil
	}

	// value enum
	if err := m.validateTraceHexdumpEnum("trace_hexdump", "body", m.TraceHexdump); err != nil {
		return err
	}

	return nil
}

func (m *Filter) validateTraceName(formats strfmt.Registry) error {

	if swag.IsZero(m.TraceName) { // not required
		return nil
	}

	if err := validate.Pattern("trace_name", "body", string(m.TraceName), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var filterTypeTraceRndForwardingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterTypeTraceRndForwardingPropEnum = append(filterTypeTraceRndForwardingPropEnum, v)
	}
}

const (

	// FilterTraceRndForwardingEnabled captures enum value "enabled"
	FilterTraceRndForwardingEnabled string = "enabled"
)

// prop value enum
func (m *Filter) validateTraceRndForwardingEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, filterTypeTraceRndForwardingPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Filter) validateTraceRndForwarding(formats strfmt.Registry) error {

	if swag.IsZero(m.TraceRndForwarding) { // not required
		return nil
	}

	// value enum
	if err := m.validateTraceRndForwardingEnum("trace_rnd_forwarding", "body", m.TraceRndForwarding); err != nil {
		return err
	}

	return nil
}

var filterTypeTraceRndParsingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterTypeTraceRndParsingPropEnum = append(filterTypeTraceRndParsingPropEnum, v)
	}
}

const (

	// FilterTraceRndParsingEnabled captures enum value "enabled"
	FilterTraceRndParsingEnabled string = "enabled"
)

// prop value enum
func (m *Filter) validateTraceRndParsingEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, filterTypeTraceRndParsingPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Filter) validateTraceRndParsing(formats strfmt.Registry) error {

	if swag.IsZero(m.TraceRndParsing) { // not required
		return nil
	}

	// value enum
	if err := m.validateTraceRndParsingEnum("trace_rnd_parsing", "body", m.TraceRndParsing); err != nil {
		return err
	}

	return nil
}

var filterTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["trace","compression","spoe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterTypeTypePropEnum = append(filterTypeTypePropEnum, v)
	}
}

const (

	// FilterTypeTrace captures enum value "trace"
	FilterTypeTrace string = "trace"

	// FilterTypeCompression captures enum value "compression"
	FilterTypeCompression string = "compression"

	// FilterTypeSpoe captures enum value "spoe"
	FilterTypeSpoe string = "spoe"
)

// prop value enum
func (m *Filter) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, filterTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Filter) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Filter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Filter) UnmarshalBinary(b []byte) error {
	var res Filter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
