// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Frontend Frontend
//
// HAProxy frontend configuration
// swagger:model frontend
type Frontend struct {

	// client inactivity timeout
	ClientInactivityTimeout *int64 `json:"client_inactivity_timeout,omitempty"`

	// continuous statistics
	// Enum: [enabled]
	ContinuousStatistics string `json:"continuous_statistics,omitempty"`

	// default farm
	// Pattern: ^[A-Za-z0-9-_.:]+$
	DefaultFarm string `json:"default_farm,omitempty"`

	// http connection mode
	// Enum: [tunnel passive-close forced-close server-close keep-alive]
	HTTPConnectionMode string `json:"http_connection_mode,omitempty"`

	// http keepalive timeout
	HTTPKeepaliveTimeout *int64 `json:"http_keepalive_timeout,omitempty"`

	// http pretend keepalive
	// Enum: [enabled disabled]
	HTTPPretendKeepalive string `json:"http_pretend_keepalive,omitempty"`

	// http request timeout
	HTTPRequestTimeout *int64 `json:"http_request_timeout,omitempty"`

	// log
	// Enum: [enabled]
	Log string `json:"log,omitempty"`

	// log format
	// Enum: [tcp http clf]
	LogFormat string `json:"log_format,omitempty"`

	// log ignore null
	// Enum: [enabled disabled]
	LogIgnoreNull string `json:"log_ignore_null,omitempty"`

	// max connections
	MaxConnections *int64 `json:"max_connections,omitempty"`

	// name
	// Required: true
	// Pattern: ^[A-Za-z0-9-_.:]+$
	Name string `json:"name"`

	// protocol
	// Enum: [http tcp]
	Protocol string `json:"protocol,omitempty"`

	// tcpreq inspect delay
	TcpreqInspectDelay *int64 `json:"tcpreq_inspect_delay,omitempty"`
}

// Validate validates this frontend
func (m *Frontend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContinuousStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultFarm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPConnectionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPPretendKeepalive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogIgnoreNull(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var frontendTypeContinuousStatisticsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frontendTypeContinuousStatisticsPropEnum = append(frontendTypeContinuousStatisticsPropEnum, v)
	}
}

const (

	// FrontendContinuousStatisticsEnabled captures enum value "enabled"
	FrontendContinuousStatisticsEnabled string = "enabled"
)

// prop value enum
func (m *Frontend) validateContinuousStatisticsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, frontendTypeContinuousStatisticsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Frontend) validateContinuousStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.ContinuousStatistics) { // not required
		return nil
	}

	// value enum
	if err := m.validateContinuousStatisticsEnum("continuous_statistics", "body", m.ContinuousStatistics); err != nil {
		return err
	}

	return nil
}

func (m *Frontend) validateDefaultFarm(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultFarm) { // not required
		return nil
	}

	if err := validate.Pattern("default_farm", "body", string(m.DefaultFarm), `^[A-Za-z0-9-_.:]+$`); err != nil {
		return err
	}

	return nil
}

var frontendTypeHTTPConnectionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tunnel","passive-close","forced-close","server-close","keep-alive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frontendTypeHTTPConnectionModePropEnum = append(frontendTypeHTTPConnectionModePropEnum, v)
	}
}

const (

	// FrontendHTTPConnectionModeTunnel captures enum value "tunnel"
	FrontendHTTPConnectionModeTunnel string = "tunnel"

	// FrontendHTTPConnectionModePassiveClose captures enum value "passive-close"
	FrontendHTTPConnectionModePassiveClose string = "passive-close"

	// FrontendHTTPConnectionModeForcedClose captures enum value "forced-close"
	FrontendHTTPConnectionModeForcedClose string = "forced-close"

	// FrontendHTTPConnectionModeServerClose captures enum value "server-close"
	FrontendHTTPConnectionModeServerClose string = "server-close"

	// FrontendHTTPConnectionModeKeepAlive captures enum value "keep-alive"
	FrontendHTTPConnectionModeKeepAlive string = "keep-alive"
)

// prop value enum
func (m *Frontend) validateHTTPConnectionModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, frontendTypeHTTPConnectionModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Frontend) validateHTTPConnectionMode(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPConnectionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPConnectionModeEnum("http_connection_mode", "body", m.HTTPConnectionMode); err != nil {
		return err
	}

	return nil
}

var frontendTypeHTTPPretendKeepalivePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frontendTypeHTTPPretendKeepalivePropEnum = append(frontendTypeHTTPPretendKeepalivePropEnum, v)
	}
}

const (

	// FrontendHTTPPretendKeepaliveEnabled captures enum value "enabled"
	FrontendHTTPPretendKeepaliveEnabled string = "enabled"

	// FrontendHTTPPretendKeepaliveDisabled captures enum value "disabled"
	FrontendHTTPPretendKeepaliveDisabled string = "disabled"
)

// prop value enum
func (m *Frontend) validateHTTPPretendKeepaliveEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, frontendTypeHTTPPretendKeepalivePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Frontend) validateHTTPPretendKeepalive(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPPretendKeepalive) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPPretendKeepaliveEnum("http_pretend_keepalive", "body", m.HTTPPretendKeepalive); err != nil {
		return err
	}

	return nil
}

var frontendTypeLogPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frontendTypeLogPropEnum = append(frontendTypeLogPropEnum, v)
	}
}

const (

	// FrontendLogEnabled captures enum value "enabled"
	FrontendLogEnabled string = "enabled"
)

// prop value enum
func (m *Frontend) validateLogEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, frontendTypeLogPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Frontend) validateLog(formats strfmt.Registry) error {

	if swag.IsZero(m.Log) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogEnum("log", "body", m.Log); err != nil {
		return err
	}

	return nil
}

var frontendTypeLogFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","http","clf"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frontendTypeLogFormatPropEnum = append(frontendTypeLogFormatPropEnum, v)
	}
}

const (

	// FrontendLogFormatTCP captures enum value "tcp"
	FrontendLogFormatTCP string = "tcp"

	// FrontendLogFormatHTTP captures enum value "http"
	FrontendLogFormatHTTP string = "http"

	// FrontendLogFormatClf captures enum value "clf"
	FrontendLogFormatClf string = "clf"
)

// prop value enum
func (m *Frontend) validateLogFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, frontendTypeLogFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Frontend) validateLogFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.LogFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogFormatEnum("log_format", "body", m.LogFormat); err != nil {
		return err
	}

	return nil
}

var frontendTypeLogIgnoreNullPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frontendTypeLogIgnoreNullPropEnum = append(frontendTypeLogIgnoreNullPropEnum, v)
	}
}

const (

	// FrontendLogIgnoreNullEnabled captures enum value "enabled"
	FrontendLogIgnoreNullEnabled string = "enabled"

	// FrontendLogIgnoreNullDisabled captures enum value "disabled"
	FrontendLogIgnoreNullDisabled string = "disabled"
)

// prop value enum
func (m *Frontend) validateLogIgnoreNullEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, frontendTypeLogIgnoreNullPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Frontend) validateLogIgnoreNull(formats strfmt.Registry) error {

	if swag.IsZero(m.LogIgnoreNull) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogIgnoreNullEnum("log_ignore_null", "body", m.LogIgnoreNull); err != nil {
		return err
	}

	return nil
}

func (m *Frontend) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z0-9-_.:]+$`); err != nil {
		return err
	}

	return nil
}

var frontendTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frontendTypeProtocolPropEnum = append(frontendTypeProtocolPropEnum, v)
	}
}

const (

	// FrontendProtocolHTTP captures enum value "http"
	FrontendProtocolHTTP string = "http"

	// FrontendProtocolTCP captures enum value "tcp"
	FrontendProtocolTCP string = "tcp"
)

// prop value enum
func (m *Frontend) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, frontendTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Frontend) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Frontend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Frontend) UnmarshalBinary(b []byte) error {
	var res Frontend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
