// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StickRequestRule Stick Request Rule
//
// Define a request pattern matching condition to stick a user to a server or to create an entry in a stickiness table.
// swagger:model stick_request_rule
type StickRequestRule struct {

	// cond
	// Enum: [if unless]
	Cond string `json:"cond,omitempty"`

	// cond test
	CondTest string `json:"cond_test,omitempty"`

	// id
	// Required: true
	ID int64 `json:"id"`

	// pattern
	// Pattern: ^[^\s]+$
	Pattern string `json:"pattern,omitempty"`

	// table
	// Pattern: ^[^\s]+$
	Table string `json:"table,omitempty"`

	// type
	// Required: true
	// Enum: [matchandstore matchonly storeonly]
	Type string `json:"type"`
}

// Validate validates this stick request rule
func (m *StickRequestRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCond(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stickRequestRuleTypeCondPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["if","unless"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stickRequestRuleTypeCondPropEnum = append(stickRequestRuleTypeCondPropEnum, v)
	}
}

const (

	// StickRequestRuleCondIf captures enum value "if"
	StickRequestRuleCondIf string = "if"

	// StickRequestRuleCondUnless captures enum value "unless"
	StickRequestRuleCondUnless string = "unless"
)

// prop value enum
func (m *StickRequestRule) validateCondEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stickRequestRuleTypeCondPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StickRequestRule) validateCond(formats strfmt.Registry) error {

	if swag.IsZero(m.Cond) { // not required
		return nil
	}

	// value enum
	if err := m.validateCondEnum("cond", "body", m.Cond); err != nil {
		return err
	}

	return nil
}

func (m *StickRequestRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *StickRequestRule) validatePattern(formats strfmt.Registry) error {

	if swag.IsZero(m.Pattern) { // not required
		return nil
	}

	if err := validate.Pattern("pattern", "body", string(m.Pattern), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *StickRequestRule) validateTable(formats strfmt.Registry) error {

	if swag.IsZero(m.Table) { // not required
		return nil
	}

	if err := validate.Pattern("table", "body", string(m.Table), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var stickRequestRuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["matchandstore","matchonly","storeonly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stickRequestRuleTypeTypePropEnum = append(stickRequestRuleTypeTypePropEnum, v)
	}
}

const (

	// StickRequestRuleTypeMatchandstore captures enum value "matchandstore"
	StickRequestRuleTypeMatchandstore string = "matchandstore"

	// StickRequestRuleTypeMatchonly captures enum value "matchonly"
	StickRequestRuleTypeMatchonly string = "matchonly"

	// StickRequestRuleTypeStoreonly captures enum value "storeonly"
	StickRequestRuleTypeStoreonly string = "storeonly"
)

// prop value enum
func (m *StickRequestRule) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stickRequestRuleTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StickRequestRule) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StickRequestRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StickRequestRule) UnmarshalBinary(b []byte) error {
	var res StickRequestRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
