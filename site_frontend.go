// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteFrontend site frontend
// swagger:model siteFrontend
type SiteFrontend struct {

	// http xff header insert
	// Enum: [enabled]
	HTTPXffHeaderInsert string `json:"http-xff-header-insert,omitempty"`

	// http connection mode
	// Enum: [tunel passive-close forced-close server-close keep-alive pretend-keepalive]
	HTTPConnectionMode string `json:"http_connection_mode,omitempty"`

	// http xff header insert name
	HTTPXffHeaderInsertName string `json:"http_xff_header_insert_name,omitempty"`

	// listeners
	Listeners []*SiteFrontendListenersItems `json:"listeners"`

	// log
	// Enum: [enabled]
	Log string `json:"log,omitempty"`

	// max connections
	MaxConnections *int64 `json:"max_connections,omitempty"`

	// protocol
	// Enum: [http tcp]
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this site frontend
func (m *SiteFrontend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPXffHeaderInsert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPConnectionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListeners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var siteFrontendTypeHTTPXffHeaderInsertPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFrontendTypeHTTPXffHeaderInsertPropEnum = append(siteFrontendTypeHTTPXffHeaderInsertPropEnum, v)
	}
}

const (

	// SiteFrontendHTTPXffHeaderInsertEnabled captures enum value "enabled"
	SiteFrontendHTTPXffHeaderInsertEnabled string = "enabled"
)

// prop value enum
func (m *SiteFrontend) validateHTTPXffHeaderInsertEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFrontendTypeHTTPXffHeaderInsertPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFrontend) validateHTTPXffHeaderInsert(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPXffHeaderInsert) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPXffHeaderInsertEnum("http-xff-header-insert", "body", m.HTTPXffHeaderInsert); err != nil {
		return err
	}

	return nil
}

var siteFrontendTypeHTTPConnectionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tunel","passive-close","forced-close","server-close","keep-alive","pretend-keepalive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFrontendTypeHTTPConnectionModePropEnum = append(siteFrontendTypeHTTPConnectionModePropEnum, v)
	}
}

const (

	// SiteFrontendHTTPConnectionModeTunel captures enum value "tunel"
	SiteFrontendHTTPConnectionModeTunel string = "tunel"

	// SiteFrontendHTTPConnectionModePassiveClose captures enum value "passive-close"
	SiteFrontendHTTPConnectionModePassiveClose string = "passive-close"

	// SiteFrontendHTTPConnectionModeForcedClose captures enum value "forced-close"
	SiteFrontendHTTPConnectionModeForcedClose string = "forced-close"

	// SiteFrontendHTTPConnectionModeServerClose captures enum value "server-close"
	SiteFrontendHTTPConnectionModeServerClose string = "server-close"

	// SiteFrontendHTTPConnectionModeKeepAlive captures enum value "keep-alive"
	SiteFrontendHTTPConnectionModeKeepAlive string = "keep-alive"

	// SiteFrontendHTTPConnectionModePretendKeepalive captures enum value "pretend-keepalive"
	SiteFrontendHTTPConnectionModePretendKeepalive string = "pretend-keepalive"
)

// prop value enum
func (m *SiteFrontend) validateHTTPConnectionModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFrontendTypeHTTPConnectionModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFrontend) validateHTTPConnectionMode(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPConnectionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPConnectionModeEnum("http_connection_mode", "body", m.HTTPConnectionMode); err != nil {
		return err
	}

	return nil
}

func (m *SiteFrontend) validateListeners(formats strfmt.Registry) error {

	if swag.IsZero(m.Listeners) { // not required
		return nil
	}

	for i := 0; i < len(m.Listeners); i++ {
		if swag.IsZero(m.Listeners[i]) { // not required
			continue
		}

		if m.Listeners[i] != nil {
			if err := m.Listeners[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listeners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var siteFrontendTypeLogPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFrontendTypeLogPropEnum = append(siteFrontendTypeLogPropEnum, v)
	}
}

const (

	// SiteFrontendLogEnabled captures enum value "enabled"
	SiteFrontendLogEnabled string = "enabled"
)

// prop value enum
func (m *SiteFrontend) validateLogEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFrontendTypeLogPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFrontend) validateLog(formats strfmt.Registry) error {

	if swag.IsZero(m.Log) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogEnum("log", "body", m.Log); err != nil {
		return err
	}

	return nil
}

var siteFrontendTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteFrontendTypeProtocolPropEnum = append(siteFrontendTypeProtocolPropEnum, v)
	}
}

const (

	// SiteFrontendProtocolHTTP captures enum value "http"
	SiteFrontendProtocolHTTP string = "http"

	// SiteFrontendProtocolTCP captures enum value "tcp"
	SiteFrontendProtocolTCP string = "tcp"
)

// prop value enum
func (m *SiteFrontend) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteFrontendTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteFrontend) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteFrontend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteFrontend) UnmarshalBinary(b []byte) error {
	var res SiteFrontend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
