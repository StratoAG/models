// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackendForwardfor backend forwardfor
// swagger:model backendForwardfor
type BackendForwardfor struct {

	// enabled
	// Required: true
	// Enum: [enabled disabled]
	Enabled *string `json:"enabled"`

	// except
	// Pattern: ^[^\s]+$
	Except string `json:"except,omitempty"`

	// header
	// Pattern: ^[^\s]+$
	Header string `json:"header,omitempty"`

	// ifnone
	Ifnone bool `json:"ifnone,omitempty"`
}

// Validate validates this backend forwardfor
func (m *BackendForwardfor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcept(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var backendForwardforTypeEnabledPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backendForwardforTypeEnabledPropEnum = append(backendForwardforTypeEnabledPropEnum, v)
	}
}

const (

	// BackendForwardforEnabledEnabled captures enum value "enabled"
	BackendForwardforEnabledEnabled string = "enabled"

	// BackendForwardforEnabledDisabled captures enum value "disabled"
	BackendForwardforEnabledDisabled string = "disabled"
)

// prop value enum
func (m *BackendForwardfor) validateEnabledEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backendForwardforTypeEnabledPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackendForwardfor) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnabledEnum("enabled", "body", *m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *BackendForwardfor) validateExcept(formats strfmt.Registry) error {

	if swag.IsZero(m.Except) { // not required
		return nil
	}

	if err := validate.Pattern("except", "body", string(m.Except), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *BackendForwardfor) validateHeader(formats strfmt.Registry) error {

	if swag.IsZero(m.Header) { // not required
		return nil
	}

	if err := validate.Pattern("header", "body", string(m.Header), `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackendForwardfor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackendForwardfor) UnmarshalBinary(b []byte) error {
	var res BackendForwardfor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
