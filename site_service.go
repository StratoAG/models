// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteService site service
// swagger:model siteService
type SiteService struct {

	// http connection mode
	// Enum: [http-tunnel httpclose forced-close http-server-close http-keep-alive]
	HTTPConnectionMode string `json:"http_connection_mode,omitempty"`

	// listeners
	Listeners []*SiteServiceListenersItems `json:"listeners"`

	// maxconn
	Maxconn *int64 `json:"maxconn,omitempty"`

	// mode
	// Enum: [http tcp]
	Mode string `json:"mode,omitempty"`
}

// Validate validates this site service
func (m *SiteService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPConnectionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListeners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var siteServiceTypeHTTPConnectionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http-tunnel","httpclose","forced-close","http-server-close","http-keep-alive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteServiceTypeHTTPConnectionModePropEnum = append(siteServiceTypeHTTPConnectionModePropEnum, v)
	}
}

const (

	// SiteServiceHTTPConnectionModeHTTPTunnel captures enum value "http-tunnel"
	SiteServiceHTTPConnectionModeHTTPTunnel string = "http-tunnel"

	// SiteServiceHTTPConnectionModeHttpclose captures enum value "httpclose"
	SiteServiceHTTPConnectionModeHttpclose string = "httpclose"

	// SiteServiceHTTPConnectionModeForcedClose captures enum value "forced-close"
	SiteServiceHTTPConnectionModeForcedClose string = "forced-close"

	// SiteServiceHTTPConnectionModeHTTPServerClose captures enum value "http-server-close"
	SiteServiceHTTPConnectionModeHTTPServerClose string = "http-server-close"

	// SiteServiceHTTPConnectionModeHTTPKeepAlive captures enum value "http-keep-alive"
	SiteServiceHTTPConnectionModeHTTPKeepAlive string = "http-keep-alive"
)

// prop value enum
func (m *SiteService) validateHTTPConnectionModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteServiceTypeHTTPConnectionModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteService) validateHTTPConnectionMode(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPConnectionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPConnectionModeEnum("http_connection_mode", "body", m.HTTPConnectionMode); err != nil {
		return err
	}

	return nil
}

func (m *SiteService) validateListeners(formats strfmt.Registry) error {

	if swag.IsZero(m.Listeners) { // not required
		return nil
	}

	for i := 0; i < len(m.Listeners); i++ {
		if swag.IsZero(m.Listeners[i]) { // not required
			continue
		}

		if m.Listeners[i] != nil {
			if err := m.Listeners[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listeners" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var siteServiceTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteServiceTypeModePropEnum = append(siteServiceTypeModePropEnum, v)
	}
}

const (

	// SiteServiceModeHTTP captures enum value "http"
	SiteServiceModeHTTP string = "http"

	// SiteServiceModeTCP captures enum value "tcp"
	SiteServiceModeTCP string = "tcp"
)

// prop value enum
func (m *SiteService) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, siteServiceTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SiteService) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteService) UnmarshalBinary(b []byte) error {
	var res SiteService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
